<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on Zea&#39;s</title>
    <link>http://zealoct.github.io/categories/ssh/</link>
    <description>Recent content in Ssh on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 27 Aug 2015 18:31:48 +0800</lastBuildDate>
    
	<atom:link href="http://zealoct.github.io/categories/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux下VIM编码设置——解决中文乱码问题</title>
      <link>http://zealoct.github.io/post/2015-08-27-xshell-vim-encoding/</link>
      <pubDate>Thu, 27 Aug 2015 18:31:48 +0800</pubDate>
      
      <guid>http://zealoct.github.io/post/2015-08-27-xshell-vim-encoding/</guid>
      <description>日常工作与生活中经常需要在Windows下通过Xshell、Putty等SSH客户端远程连接Linux服务器， 在这种场景下使用Vim编辑器查看与录入中文经常会遇到乱码问题。 此外，网上也有很多文章提到过使用Vim将GBK编码的文件转换为UTF-8编码的方法， 这种文件编码的转换在远程Vim的情况下尤其应当小心操作，并提前备份，否则一旦转换失败可能再也难以恢复。 本文记录了一些远程Vim配置方面的心得，希望对大家有所帮助。
远程Vim的工作原理可以简单地理解为从文件读取数据，将数据从文件的存储编码转换到终端可识别的终端编码， 终端将数据流转发给SSH客户端，SSH客户端则根据客户端内配置的SSH客户端编码来对数据流解码，并将内容呈现给用户。 这三个编码我们最关心的是文件的存储编码，然而在配置的时候必须保证三个编码都配置正确，才能正确地显示和转换中文。
正确的配置（UTF-8） 废话少说，先来看正确的配置是怎样的，以及如何正确地配置。
首先，终端编码与SSH客户端编码需保持一致，客户端编码的查看与配置方法各有差异，在此不作分析；终端编码可通过如下命令查看：
locale charmap  如果不是UTF-8的话（默认为ISO-8859-1），可以通过修改环境变量LANG和LC_ALL来修改，将如下两行添加进.bashrc
export LANG=&#39;en_US.UTF-8&#39; export LC_ALL=&#39;en_US.UTF-8&#39;  这时再通过locale命令查看终端编码应该已经变成UTF-8了。
接下来要配置Vim，在正确地配置了终端编码为UTF-8之后，将下面一行添加进.vimrc即可：
set fencs=utf-8, gbk  注意：无需配置fenc、enc、tenc这三个变量！
至此，Vim显示中文的问题应该可以完美解决了！
Vim配置解析 前边快速地描述了应当如何配置Vim，但并未详细解释这几个选项的作用，但若要做到清楚明白地使用Vim转换文件编码， 了解这些选项的意义还是很有必要的。
Vim与编码相关的配置选项有四个，分别是fileencodings(fencs)，fileencoding(fenc)， encoding(enc)和termencoding(tenc)，其中 fencs为一个编码列表，当打开一个文件时，Vim会依次尝试利用列表中的编码去解读文件内容； fenc告诉Vim以哪种编码保存文件内容； enc告诉Vim将文件内容转为哪种编码存储在Vim工作缓冲区内； tenc告诉Vim将缓冲区内的编码转换为何种编码发送给终端。
当Vim打开一个文件的时候，会首先读取fencs列表，并尝试以第一个编码去解码文件内容，如果失败则继续尝试第二个， 直到找到一个解码成功的编码，并将fenc变量设为该编码。如果列表内的编码全部解码失败，则设置fenc变量为空字符串。
enc选项为Vim工作区内容编码，即Vim工作缓存内文件内容的编码， 该编码对用户并不可见，默认为ISO-8859-1（latin1），一般情况下不需要配置。 Vim打开文件时，会从fencs列表内匹配编码，并将文件内容从该编码转换为enc编码存储在Vim进程的内存里。
fenc为文件保存编码，当Vim存储一个文件时，会将工作内存内缓存的内容由enc编码转换为fenc编码，并写到相应的文件里。 需要注意的是fenc选项在Vim启动时会根据fencs设定，因此在.vimrc内配置fenc并没有意义， 一般只有在需要进行文件编码转换的时候会动态设定该选项的值。 如果fenc选项为空字符串，则默认使用enc选项所指定的编码保存文件。
tenc告诉Vim终端编码类型，Vim会将缓冲区内容由enc编码转换为tenc编码之后发送给终端渲染。 与fenc类似，如果tenc为空字符串，则不进行转换，直接输出enc编码到终端。
如果你对这些编码转来转去的感觉比较麻烦，一个简单不会出错的方法就是把这些全部都设为UTF-8，世界就清净了 (=
文件编码转换 在进行文件编码转换之前，最好保证上述配置都正确无误（都是UTF-8），并且你的Vim可以正确地解读目标文件编码内容， 简单来说就是fenc不是空字符串（这一点很重要，在后面会详细讲述），那么此时你的状态应当是，Vim知道源文件编码， 缓冲区内的编码为enc，此时若要进行编码转换，只需在Vim内执行命令（假设UTF-8转GBK）：
:set fenc=gbk  之后保存的时候，Vim就会自动将缓冲区内容从enc转到新的fenc编码保存了。
我能显示中文就是配置正确了么？ 答案当然是否定的，而且我就在这个问题上栽过跟头。
远程Vim过程中，可以“正常显示”中文意味着什么呢？答案是，终端发送给SSH客户端的数据被正确地解码了。 但是，这并不代表你的配置是正确的了，在这种场景下进行文件编码转换是非常危险的行为！
举一个配置错误、转换错误但是显示正常的例子吧。
LANG=&#39;en_US&#39; LC_ALL=&#39;en_US&#39; fencs=utf-8,gbk Xshell encoding=&#39;gbk&#39;  此时，终端编码为latin1，Vim内部编码亦为latin1，打开一个GBK编码的中文文件，中文却是可以正常显示的！ 其根本原因在于，GBK和latin1都是ASCII编码方式（使用latin1来解码GBK数据流并不会出错，只是会出现乱码）， 尝试用latin1编码打开GBK编码的文件并不会进行实质上的编码转换，终端把它认为是latin1编码的内容发送给Xshell， Xshell只要使用GBK编码解码，就依然可以正确地显示中文。</description>
    </item>
    
  </channel>
</rss>