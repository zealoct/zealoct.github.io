<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Llvm on Zea&#39;s</title>
    <link>http://zealoct.github.io/categories/llvm/</link>
    <description>Recent content in Llvm on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 14 Mar 2018 14:40:01 +0800</lastBuildDate>
    
	<atom:link href="http://zealoct.github.io/categories/llvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LLVM Encoding Asm Label</title>
      <link>http://zealoct.github.io/post/llvm-encoding-asm-label/</link>
      <pubDate>Wed, 14 Mar 2018 14:40:01 +0800</pubDate>
      
      <guid>http://zealoct.github.io/post/llvm-encoding-asm-label/</guid>
      <description>汇编代码中的Label标记了一段汇编代码的起始地址，主要用在分支、跳转类的指令中， 一般汇编代码中的Label以字符串的形式出现，如：
bne r0, r1, __IF_THEN # 如果r0!=r1,跳转到__IF_THEN标记的代码段 jmp __IF_ELSE # 跳转到__IF_ELSE标记的代码段  其中__IF_THEN和__IF_ELSE分别标记了if语句的两个分支。 但是在实际的可执行文件中，Label并不存在，分支跳转指令中实际存储的是offset：
-Op- -Rs- -Rt- - offset - 1000 0000 0001 0000 0000 0000 0000 1000 # bne r0, r1, 8 # 目标指令与当前PC差为8个字节 # 跳过了一条jmp指令 -Op- - offset - 1001 0000 0000 0000 0000 0000 0010 1000 # jmp 40 # 跳过了9条指令  Label信息在编译初始阶段无法确定，直到最终完成编译的时候才会赋予其具体的值， 因此无法对Label进行静态的编码。 LLVM中使用fixup来处理这些在MCCodeEmitter中无法确定的信息。
以jmp $target指令为例，实现Label编码需要如下步骤：
 定义jtarget作为jmp指令的Operand:
def jtarget : Operand&amp;lt;OtherVT&amp;gt; { let EncoderMethod = &amp;quot;getJumpTargetOpValue&amp;quot;; }  这里要指明使用getJumpTargetOpValue()方法来对该Operand进行编码</description>
    </item>
    
  </channel>
</rss>