<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Zea&#39;s</title>
    <link>http://zealoct.github.io/categories/notes/</link>
    <description>Recent content in Notes on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Feb 2014 15:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://zealoct.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim Efficiency Notes</title>
      <link>http://zealoct.github.io/post/2014-02-24-vim-notes/</link>
      <pubDate>Mon, 24 Feb 2014 15:00:00 +0800</pubDate>
      
      <guid>http://zealoct.github.io/post/2014-02-24-vim-notes/</guid>
      <description>关于Vim的一些容易被忽视、却又能提升使用体验和操作效率的操作细节。同时记录Vim中一些（我见到过的）比较实用的配置，分享的同时也给自己留个备忘吧。 一下子总结不完整，慢慢更新。
基本操作 基本按照幸福感排序，排在前边的是我觉得用了之后一口气儿上五楼都不累的，稍微靠后一点排的就比较随意了。每一项第一行的*斜体字*是我认为该组合比较有用的场景。
使用Ctrl+[ 替代Esc，任何时候 Ctrl+[ 功能与Esc键完全相同，用这一快捷键的好处就不用解释了，大家都知道按Esc是件多么令人伤神的事情
X和x，任何时候 X 是退格（Backspace），x 是删除（Delete）
使用Ctrl+e 和 Ctrl+y逐行翻滚页面，阅读（代码） 这两个组合非常有用，作用分别是维持当前坐标位置不变，页面上滚和下滚一行
** #和* **，阅读代码 #（shift+3）用来向上搜索当前光标所在单词，*（shift+8）用来向下搜索
%，阅读代码 在相对应的两个括号之间跳转，当一段函数体非常长的时候能方便的从反括号跳至函数/循环/if等结构的开始处
+ 和 - + 的功能是跳转到下一行行首，与之相对应，- 是跳转到上一行行首
J 删除行末换行符，在把多行连接成一行时非常有用
zz和zt，阅读 将光标所在行置于屏幕中间/顶部，阅读代码时比较有用
H，M 和 L, 代码、文章编辑 H，M和L（注意是大写）用来将光标快速移动到当前屏幕的最顶行/中间行/最底行
使用m 和` （Esc下边那个按键）进行标记和跳转 先按m，然后随意输入一个字母，就能用该字母标记当前行，之后在当前文件任意位置可以按 ` + 之前标记的字母快速跳转到这一行。在被标记的行按m，加同样的字母可以取消标记，如果连续按两次`，则光标会在当前位置，和上一次的跳转位置之间来回切换 此外，这里还可以使用*单引号*代替反引号，他们俩的功能是一样一样的
A 和 I A 是在本行行尾插入，I 是在本行行首插入。
Ctrl+a和Ctrl+x 将当前光标所在位置处的数字加1/减1，比较好玩儿的命令，一般用不到，不过用到的话确实很方便
配置 wildmode, wildmenu 输入命令:set wildmode=list:longest,full和:set wildmenu，在vim窗口下方会出现一条menu，当需要补全的时候（例如:e命令打开新文件，或者输入:s后希望模糊搜索所有s开头的vim命令），按Tab键时自动补全时行为会变为：
 出现一个list，为当前目录下所有文件，此时可进行并再次按Tab补全 跳至列表第一个选项，或者（如果第1步中输入了文件开头字母）自动补全当前输入  默认行为没有步骤1，直接跳转第一个选项，而且不会显示整体列表，使用起来体验极差。</description>
    </item>
    
    <item>
      <title>Notes on Paxos Made Simple</title>
      <link>http://zealoct.github.io/post/2014-02-12-paxos/</link>
      <pubDate>Wed, 12 Feb 2014 16:21:02 +0800</pubDate>
      
      <guid>http://zealoct.github.io/post/2014-02-12-paxos/</guid>
      <description>Origin paper link
Problem safety requirements
 Only a value that has been proposed may be chosen Only a single value is chosen, and A process never learns that a value has been chosen unless it acutally has been  three agents: proposers(P), acceptors(A), and learners(L).
use customary asynchronous, non-Byzantine model, in which:
 Agents operate at arbitrary speed, may fail by stopping, and may restart Messages can take arbitrarily long to be delivered, can be duplicated, and can be lost, but they are not corrupted.</description>
    </item>
    
  </channel>
</rss>