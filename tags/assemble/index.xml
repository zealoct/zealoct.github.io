<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assemble on Zea&#39;s</title>
    <link>http://jhan.xyz/tags/assemble/</link>
    <description>Recent content in Assemble on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Mar 2014 19:54:09 +0800</lastBuildDate>
    
	<atom:link href="http://jhan.xyz/tags/assemble/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 下 c 的扩展内联汇编</title>
      <link>http://jhan.xyz/post/2014-03-05-c-asm/</link>
      <pubDate>Wed, 05 Mar 2014 19:54:09 +0800</pubDate>
      
      <guid>http://jhan.xyz/post/2014-03-05-c-asm/</guid>
      <description>简单总结了一下自己看到用到的一些内联汇编的知识点，并不是一个完整的总结，以后对内联汇编有了新的了解会慢慢扩充。
详细细节可以参考 gcc 关与扩展内联汇编的 文档
格式说明 __asm__　__volatile__(&amp;quot;Instruction List&amp;quot; : Output : Input : Clobber/Modify)  冒号的使用原则（*O, I, C 分别指代 Output, Input, Clobber/Modify*）：
 C 为空，第三个冒号必须省略 O、I 为空时，前边的冒号（第一、二个）可选择性省略 O，I，C 中任何一个不为空，则之前的冒号均必须保留，如只有 I 不为空时，O 和 I 之前的冒号必须保留，只有 C 不为空时三个冒号都必须保留  合法的调用包括
__asm__(&amp;quot; &amp;quot; : : : &amp;quot;memory&amp;quot;); __asm__(&amp;quot; &amp;quot; : :); __asm__(&amp;quot;mov %1, %%eax&amp;quot; : &amp;quot;=a&amp;quot;(var_a)); __asm__(&amp;quot;mov %1, %%eax&amp;quot; : &amp;quot;=a&amp;quot;(var_a) :); __asm__(&amp;quot;mov %%edx, %%eax&amp;quot; : &amp;quot;=a&amp;quot;(var_a) : &amp;quot;d&amp;quot;(var_d)); __asm__(&amp;quot;mov %%edx, %%eax&amp;quot; : &amp;quot;=a&amp;quot;(var_a) : : &amp;quot;ebx&amp;quot;);  下面分别介绍指令列表、输出、输入和修改声明这四个部分。</description>
    </item>
    
  </channel>
</rss>