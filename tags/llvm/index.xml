<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Llvm on Zea&#39;s</title>
    <link>http://jhan.xyz/tags/llvm/</link>
    <description>Recent content in Llvm on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Mar 2018 22:09:39 +0800</lastBuildDate>
    
	<atom:link href="http://jhan.xyz/tags/llvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LLVM Sparc Load Mem Operand</title>
      <link>http://jhan.xyz/notes/llvm-sparc-load-mem-operand/</link>
      <pubDate>Mon, 26 Mar 2018 22:09:39 +0800</pubDate>
      
      <guid>http://jhan.xyz/notes/llvm-sparc-load-mem-operand/</guid>
      <description>Sparc Load指令基本格式是
ld [address], regrd  其中address域解释为
 The effective address for a load instruction is “r[rs1] + r[rs2]” if the i field is zero, or “r[rs1] + sign_ext(simm13)” if the i field is one.
 打印成ASM会是reg+reg或reg+imm两种形式之一。
SparcInstrInfo.td // Addressing modes. def ADDRrr : ComplexPattern&amp;lt;iPTR, 2, &amp;quot;SelectADDRrr&amp;quot;, [], []&amp;gt;; def ADDRri : ComplexPattern&amp;lt;iPTR, 2, &amp;quot;SelectADDRri&amp;quot;, [frameindex], []&amp;gt;; // Address operands def SparcMEMrrAsmOperand : AsmOperandClass { let Name = &amp;quot;MEMrr&amp;quot;; let ParserMethod = &amp;quot;parseMEMOperand&amp;quot;; } def SparcMEMriAsmOperand : AsmOperandClass { let Name = &amp;quot;MEMri&amp;quot;; let ParserMethod = &amp;quot;parseMEMOperand&amp;quot;; } def MEMrr : Operand&amp;lt;iPTR&amp;gt; { let PrintMethod = &amp;quot;printMemOperand&amp;quot;; let MIOperandInfo = (ops ptr_rc, ptr_rc); let ParserMatchClass = SparcMEMrrAsmOperand; } def MEMri : Operand&amp;lt;iPTR&amp;gt; { let PrintMethod = &amp;quot;printMemOperand&amp;quot;; let MIOperandInfo = (ops ptr_rc, i32imm); let ParserMatchClass = SparcMEMriAsmOperand; } .</description>
    </item>
    
    <item>
      <title>LLVM Encoding Asm Label</title>
      <link>http://jhan.xyz/post/llvm-encoding-asm-label/</link>
      <pubDate>Wed, 14 Mar 2018 14:40:01 +0800</pubDate>
      
      <guid>http://jhan.xyz/post/llvm-encoding-asm-label/</guid>
      <description>汇编代码中的Label标记了一段汇编代码的起始地址，主要用在分支、跳转类的指令中， 一般汇编代码中的Label以字符串的形式出现，如：
bne r0, r1, __IF_THEN # 如果r0!=r1,跳转到__IF_THEN标记的代码段 jmp __IF_ELSE # 跳转到__IF_ELSE标记的代码段  其中__IF_THEN和__IF_ELSE分别标记了if语句的两个分支。 但是在实际的可执行文件中，Label并不存在，分支跳转指令中实际存储的是offset：
-Op- -Rs- -Rt- - offset - 1000 0000 0001 0000 0000 0000 0000 1000 # bne r0, r1, 8 # 目标指令与当前PC差为8个字节 # 跳过了一条jmp指令 -Op- - offset - 1001 0000 0000 0000 0000 0000 0010 1000 # jmp 40 # 跳过了9条指令  Label信息在编译初始阶段无法确定，直到最终完成编译的时候才会赋予其具体的值， 因此无法对Label进行静态的编码。 LLVM中使用fixup来处理这些在MCCodeEmitter中无法确定的信息。
以jmp $target指令为例，实现Label编码需要如下步骤：
 定义jtarget作为jmp指令的Operand:
def jtarget : Operand&amp;lt;OtherVT&amp;gt; { let EncoderMethod = &amp;quot;getJumpTargetOpValue&amp;quot;; }  这里要指明使用getJumpTargetOpValue()方法来对该Operand进行编码</description>
    </item>
    
  </channel>
</rss>