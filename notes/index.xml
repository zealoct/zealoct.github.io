<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Zea&#39;s</title>
    <link>http://jhan.xyz/notes/</link>
    <description>Recent content in Notes on Zea&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jhan.xyz/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NVML API 笔记</title>
      <link>http://jhan.xyz/notes/gpu-nvml-api/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://jhan.xyz/notes/gpu-nvml-api/</guid>
      <description>NVML API The NVIDIA Management Library (NVML) 是一套监控和管理 NVIDIA GPU 的 C 接口。常用的 nvidia-smi 工具就是基于 NVML 实现的。
整体上 NVML 接口可分为五类：
 支持类接口：API 本身的初始化、状态清理等，猜测包含打开设备等，比较简单不再描述 查询类接口：查询各种状态 控制类接口：控制设备 事件处理类接口： 错误报告类接口：  查询类接口 查询接口又分为3小类
 System Queries Unit Queries Device Queries  System Queries 针对本地系统的查询，这一类查询接口与设备无关。包括查询 *Cuda驱动版本号*、*驱动版本号*、*NVML 版本号*、*进程名称*。
Unit Queries 这个是 S-Class GPU 专属的功能，一个 Unit 应该是可以包含多个 GPU 的外设（具体是什么没有深入研究），根据提供的接口来看 Unit 有独立的风扇、有 LED 和独立的温度检测，UnitInfo_t结构体中还包含固件版本等信息：
struct nvmlUnitInfo_t { char firmwareVersion[96]; // Firmware version. char id[96]; // Product identifier.</description>
    </item>
    
    <item>
      <title>NVidia Profiler</title>
      <link>http://jhan.xyz/notes/nvprofiler/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://jhan.xyz/notes/nvprofiler/</guid>
      <description>Profiler  nvprof  nvvp nsight   Metrics 分类 说明：以下多级列表中所涉及到的各种分类的统计项均为举例说明所用，并非完整列表，查看所有性能数据统计的完整列表请查看此链接。
整体分类：数量统计类、效率统计类、利用率统计类、overhead 统计类
整体的利用率  achieved_occupancy  Ratio of the average active warps per active cycle to the maximum number of warps supported on a multiprocessor   指令相关 指令执行数量统计  cf_executed  Number of executed control-flow instructions  flop_count_dp flop_count_dp_add inst_executed  指令发射数量统计  cf_issued  Number of issued control-flow instructions  inst_issued  指令执行统计数据  ipc ipc_instance  Instructions executed per cycle for a single multiprocessor  issued_ipc inst_per_warp  Average number of instructions executed by each warp   执行效率  branch_efficiency  Ratio of non-divergent branches to total branches expressed as percentage  flop_dp_efficiency gld_efficiency  指令执行单元利用等级  alu_fu_utilization cf_fu_utilization  The utilization level of the multiprocessor function units that execute control-flow instructions on a scale of 0 to 10   Overhead  inst_replay_overhead  Average number of replays for each instruction executed   Stalls 统计  stall_exec_dependency  Percentage of stalls occurring because an input required by the instruction is not yet available  stall_inst_fetch stall_memory_dependency stall_sync  内存相关 各种读、写、请求吞吐  atomic_throughput  Global memory atomic and reduction throughput  dram_read_throughput ecc_throughput gld_requested_throughput gld_throughput l2_l1_read_throughput  各种读、写、请求数量  atomic_transactions  Global memory atomic and reduction transactions  dram_read_transactions ecc_transactions gld_transactions  每个 request 内的平均数量计数  atomic_transactions_per_request  Average number of global memory atomic and reduction transactions performed for each atomic and reduction instruction  gld_transactions_per_request  一些利用等级统计  dram_utilization  The utilization level of the device memory relative to the peak utilization on a scale of 0 to 10  l2_utilization  Overhead  atomic_replay_overhead  Average number of replays due to atomic and reduction bank conflicts for each instruction executed  global_cache_replay_overhead  Cache 命中率  l2_l1_read_hit_rate  Hit rate at L2 cache for all read requests from L1 cache  l2_tex_read_hit_rate  数据大小统计  dram_write_bytes  Total bytes written from L2 cache to DRAM  pcie_total_data_received  Total data bytes received through PCIe  pcie_total_data_transmitted nvlink_user_data_received nvlink_user_data_transmitted  Metric 采集范围 每个 Metric 数据均有一个采集范围的概念，也就是说该性能数据在什么范围下是准确的，根据文档描述，共有三中范围：</description>
    </item>
    
    <item>
      <title>LLVM Sparc Load Mem Operand</title>
      <link>http://jhan.xyz/notes/llvm-sparc-load-mem-operand/</link>
      <pubDate>Mon, 26 Mar 2018 22:09:39 +0800</pubDate>
      
      <guid>http://jhan.xyz/notes/llvm-sparc-load-mem-operand/</guid>
      <description>Sparc Load指令基本格式是
ld [address], regrd  其中address域解释为
 The effective address for a load instruction is “r[rs1] + r[rs2]” if the i field is zero, or “r[rs1] + sign_ext(simm13)” if the i field is one.
 打印成ASM会是reg+reg或reg+imm两种形式之一。
SparcInstrInfo.td // Addressing modes. def ADDRrr : ComplexPattern&amp;lt;iPTR, 2, &amp;quot;SelectADDRrr&amp;quot;, [], []&amp;gt;; def ADDRri : ComplexPattern&amp;lt;iPTR, 2, &amp;quot;SelectADDRri&amp;quot;, [frameindex], []&amp;gt;; // Address operands def SparcMEMrrAsmOperand : AsmOperandClass { let Name = &amp;quot;MEMrr&amp;quot;; let ParserMethod = &amp;quot;parseMEMOperand&amp;quot;; } def SparcMEMriAsmOperand : AsmOperandClass { let Name = &amp;quot;MEMri&amp;quot;; let ParserMethod = &amp;quot;parseMEMOperand&amp;quot;; } def MEMrr : Operand&amp;lt;iPTR&amp;gt; { let PrintMethod = &amp;quot;printMemOperand&amp;quot;; let MIOperandInfo = (ops ptr_rc, ptr_rc); let ParserMatchClass = SparcMEMrrAsmOperand; } def MEMri : Operand&amp;lt;iPTR&amp;gt; { let PrintMethod = &amp;quot;printMemOperand&amp;quot;; let MIOperandInfo = (ops ptr_rc, i32imm); let ParserMatchClass = SparcMEMriAsmOperand; } .</description>
    </item>
    
    <item>
      <title>Placeholder for Notes</title>
      <link>http://jhan.xyz/notes/placeholder/</link>
      <pubDate>Thu, 20 Aug 2015 17:46:35 +0800</pubDate>
      
      <guid>http://jhan.xyz/notes/placeholder/</guid>
      <description> Hello World </description>
    </item>
    
  </channel>
</rss>